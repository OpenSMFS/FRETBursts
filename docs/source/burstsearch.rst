.. currentmodule:: fretbursts.burstlib

Burst Search in FRETBursts
==========================

This section describes some details and convention used to implement burst
search in FRETBursts.
For a more general explanation of burst search concepts see
`(Ingargiola 2016) <http://dx.doi.org/10.1101/039198>`__.
For usage examples see the
`us-ALEX notebook <http://nbviewer.ipython.org/urls/raw.github.com/tritemio/FRETBursts_notebooks/master/notebooks/FRETBursts%2520-%2520us-ALEX%2520smFRET%2520burst%2520analysis.ipynb>`__.


Defining the rate estimator
---------------------------

Before describing FRETBursts implementation let me introduce an expression
for computing rates of random events that will be used later on.
A general expression, used by FRETBursts (since version 0.5.6), for estimating
the rate using *m* consecutive timestamps is:

.. math::
    \hat{\lambda} = \frac{m - 1 - c}{t_{i + m - 1} - t_{i}}
    :label: ratedef

where :math:`c` is a parameter that can be passed to all FRETBursts functions
that deal with photon rates. Note that :math:`m` is the number of photons
and :math:`m - 1` is the number of inter-photon delays. For example,
using :math:`c=1`, yields an unbiased estimator of the rate for events
generated by a stationary Poisson process. See
`this notebook <http://nbviewer.jupyter.org/github/tritemio/notebooks/blob/master/Estimation%20of%20rates%20of%20random%20events.ipynb>`__
for a discussion of the different estimator properties as a function of
:math:`c`. In practice, the choice of :math:`c` is a convention and is provided
for flexibility and to match results of other software that may use a different
definition.

In FRETBursts version 0.5.5 or earlier, there is no
`c` parameter and the rate is always computed as
:math:`\hat{\lambda} = m / (t_{i + m - 1} - t_{i})`
(equivalent to :math:`c=-1`).

Conventions in burst search
---------------------------

Burst search is mainly performed calling the method
:meth:`Data.burst_search`. The and-gate burst search function
(:meth:`fretbursts.burstlib_ext.burst_search_and`) calls
:meth:`Data.burst_search` under the hood, so all the considerations
below are also valid for the and-gate version.

With :meth:`Data.burst_search`, you can perform burst search by setting
a "rate threshold" *F* times larger than the background rate (argument `F`),
or you can just set a single fixed rate for the full measurement
(argument `min_rate_cps`). In both cases the real burst search is performed
by the low-level function :func:`.phtools.burstsearch.bsearch_py`, which
takes as input parameters *m* and *T*. This function finds bursts
when a group of *m* consecutive photons lies within a *T* time window.
You can find an analysis of the algorithm implementation and performance
considerations in this
`blog post <http://tritemio.github.io/smbits/2015/12/06/optimize-burst-search-python/>`__.

When using the *F* argument, FRETBursts will choose the appropriate `T` for each
background period in order to obtain a "rate threshold"
*F times larger than background rate*. Practically, to compute *T*, FRETBursts
uses the expression (derived from :eq:`ratedef`):

.. math::
  T(t) = \frac{m - 1 - c}{F \cdot \hat{\lambda}_{bg}(t)}

where :math:`\hat{\lambda}_{bg}(t)` is the estimated background rate
as a function of time (:math:`t`).

Conversely, when directly fixing a rate with the argument
`min_rate_cps` (:math:`\lambda_{th}`), FRETBursts computes *T*
using the expression:

.. math::
  T = \frac{m - 1 - c}{\lambda_{th}}

The parameter :math:`c` can be specified when performing burst search.
When not specified, the default value of :math:`c=-1` is used.
This choice preserves backward compatibility with results obtained
with FRETBursts 0.5.5 or earlier.

Low-level burst search functions
--------------------------------


.. automodule:: fretbursts.phtools.burstsearch
    :members:
